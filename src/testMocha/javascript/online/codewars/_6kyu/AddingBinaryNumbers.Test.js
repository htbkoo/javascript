/**
 * Created by Hey on 12 Aug 2016
 */
require.main.require('src/testMocha/javascript/testInfrastructure');
var Test = require('chai');

//noinspection JSLint
var add = srcDirRequire(__dirname, 'AddingBinaryNumbers');

//noinspection JSUnresolvedFunction,JSLint
describe('AddingBinaryNumbers', function () {
    //noinspection JSLint,JSUnresolvedFunction
    describe("Basic Tests:", function () {
        //noinspection JSLint,JSUnresolvedFunction
        it("should pass given test", function () {
            "use strict";
            Test.assert.equal(add('111', '10'), '1001');
            Test.assert.equal(add('1101', '101'), '10010');
            Test.assert.equal(add('1101', '10111'), '100100');
        });
        //noinspection JSLint,JSUnresolvedFunction
        it("should pass example in submission", function () {
            "use strict";
            Test.assert.equal(add('00', '0'), '0');
        });
        //noinspection JSLint,JSUnresolvedFunction
        it("should pass random tests", function () {
            "use strict";
            Test.assert.equal(add('0010110101101100010', '1100111001010001'), '100011100110110011');
            Test.assert.equal(add('111000000001000011110010001100011', '0010111000010011001011001001110110101111000101010100101100010000001110000101100100111001'), '10111000010011001011001001110110101111000101010100110011010000010110100011110110011100');
            Test.assert.equal(add('110011010110', '1111010000111100101111100000001111010000001101001000111010010011111001010011001011100111100001'), '1111010000111100101111100000001111010000001101001000111010010011111001010011001100011010110111');
            Test.assert.equal(add('01100101001001111010010', '011110101101011000100010000110000001011100101101100100111000111'), '11110101101011000100010000110000001011110010010101110110011001');
            Test.assert.equal(add('10111001111110111100101000110001000101111', '10010111010011010011100001000101000010111100111110110111101010110'), '10010111010011010011100011111111000001111001100111101000110000101');
            Test.assert.equal(add('111100011011011011010001001100111110010111011011111000100110101100101111001011101110010100100', '001010101111100010001010101110000000001'), '111100011011011011010001001100111110010111011011111000110001011100010001010110011100010100101');
            Test.assert.equal(add('0111011111101000111111010100010010011110010100100001010100001', '1010110000111010011001011100101110100001001001010001011011111100001000100100'), '1010110000111011010101011001110110011011101011100101001110100000010011000101');
            Test.assert.equal(add('000010111011110011010110011000001010011010111101111100000001000011111', '0001110110100'), '10111011110011010110011000001010011010111101111100000010111010011');
            Test.assert.equal(add('10011110000010011111100', '1000110000111100111101010010100101010100100001001110000000110111010111100001010110'), '1000110000111100111101010010100101010100100001001110000001001011000111110101010010');
            Test.assert.equal(add('110001011001010010011001101110010001100011011100011010010100001010011110', '101110011011111000011011000010011111110111011011011000001000110001011110111011011111'), '101110011100101001110100010100111001100101101100111011100101001011110011000101111101');
            Test.assert.equal(add('010110001111100100110100110111000100011011', '01000011111100110000010101000110110111'), '10111010011100001100101001100001011010010');
            Test.assert.equal(add('1100111001110101011001100', '01001100111100000001011100011001100111111011101'), '1001100111100000001101001010011011101010101001');
            Test.assert.equal(add('1000001101010111100000010011101100101', '000000101101100110000110000010000110001100100010100101001111'), '101101100110000111000011110001001000100101000010110100');
            Test.assert.equal(add('01010000000111001101100001010011100110110011111101111000110100010100011011', '10000101111'), '1010000000111001101100001010011100110110011111101111000110100100101001010');
            Test.assert.equal(add('01000111101100111100101011111010010001001100111000110101000110', '01110111010010000010111001111000101111000100110000001'), '1000111111011110110111100010001100000010010110001011011000111');
            Test.assert.equal(add('0000011011100101100010011111110111001011111001111101110000101110100110000110111010001010101', '01111110000101111111011011011'), '11011100101100010011111110111001011111001111101110000110000100100001100111001100110000');
            Test.assert.equal(add('00010011100111', '11000001110001101100110111001000010010010100001000010001'), '11000001110001101100110111001000010010010100011011111000');
            Test.assert.equal(add('01110101101111000011001011000110111111000100110100111010011011', '0101100101000110110011101110101001110110111010'), '1110101101111001000110000001101110010110011011110110001010101');
            Test.assert.equal(add('0111001010110010010001100011', '10011001'), '111001010110010010011111100');
            Test.assert.equal(add('1110010010111010111101110101000100111011010010110001011011101000110010', '1010110110100010001001011000100101001001111'), '1110010010111010111101110110011011101111100011111100100000010010000001');
            Test.assert.equal(add('1101011110001101001101100000110101001011010010010110001011011101001010001111101111101101', '0001011101100110011011100111110111001110011110001111111100'), '1101011110001101001101100000110110101000111000110001110011010100011000101101111111101001');
            Test.assert.equal(add('110', '101101011001011110110001111101101010010010001010000101001000001001100110100101110010100100101111100'), '101101011001011110110001111101101010010010001010000101001000001001100110100101110010100100110000010');
            Test.assert.equal(add('110001001001000001111011', '1000000101110010011000011010011001100110011101010101100111'), '1000000101110010011000011010011010010111100110010111100010');
            Test.assert.equal(add('0100110000100100100110', '0001011001101101001010010010100100'), '1011001110001111010110111001010');
            Test.assert.equal(add('000100010111000011101001011100', '110101001110000111010101001111101100101010011010010000010001100011001100011'), '110101001110000111010101001111101100101010011010110011001010000000010111111');
            Test.assert.equal(add('00101101001101110010001011001110100010111011101111', '11010001101001011001001101100111000111001110001011111001101010100111100100010010110001000000'), '11010001101001011001001101100111000111001110111001000111011100110010110010110101101100101111');
            Test.assert.equal(add('100011110101111000001110111010001110101101001001000110111100000', '1110000000101110101000110100011110001001010100110000100011011010011000001101111101100100'), '1110000000101110101000111000111100111000010110100111110101010000000001010110110101000100');
            Test.assert.equal(add('101001011110010011001', '100111100011100011010001000010011111100101000110000100000000110011101101101011111011110001000'), '100111100011100011010001000010011111100101000110000100000000110011101110010101011010000100001');
            Test.assert.equal(add('1101110010100000111111011111010111111101010001111100111011011010', '110101111010100000111011011001011100000110010100010010011111100010101101000110111010111011110100'), '110101111010100000111011011001101001111000110101010001111110111010101010011000110111110111001110');
            Test.assert.equal(add('0001111110011011111010100011001011000100001', '1011010000011100'), '1111110011011111010100100100101000111101');
            Test.assert.equal(add('10000001100010010110010111000110000011111111100', '0110111110010010010110110110101101110111011101100110'), '111001110011110101001101001100110100111111101100010');
            Test.assert.equal(add('011010001110100110010101111010', '110010011111100001100100100010001100011111110010'), '110010011111100001111110110000110010110101101100');
            Test.assert.equal(add('0110101101110111101100111000000100101011101101111001', '11100000110011101010010110000010101110000011011'), '111001001111110001010001010110101000001011110010100');
            Test.assert.equal(add('1101100111111110100110011001010110001001110000100001110101001100010', '001000100111100010001101010111110'), '1101100111111110100110011001010110010010011000000100000010100100000');
            Test.assert.equal(add('00000000111110001101011000101101011111010000101100010110100110100101011', '01010'), '111110001101011000101101011111010000101100010110100110100110101');
            Test.assert.equal(add('00000100111110000011010110000100110010110', '0011110000011010000001001010101001000110111110001100110001000111111010001001001100000111010010'), '11110000011010000001001010101001000110111110001100110001101111101010100011111100101101101000');
            Test.assert.equal(add('111001000011010101111100111111010000100001110011010101', '10101110001001110111101001000011101011110101100101110100000'), '10110101010010010010011000101011100101111001110100001110101');
            Test.assert.equal(add('11110011111011001010011100010001110000111000010000100010101001100100110001100010', '11000100110111110111100010111101101011010010'), '11110011111011001010011100010001110011111101001000011010001100100010011100110100');
            Test.assert.equal(add('01000110100001101011011011110111101000011010011101001010101110001011010001', '1001111000'), '1000110100001101011011011110111101000011010011101001010101110010101001001');
            Test.assert.equal(add('101110001', '0111011001010101100111011010010011000001010111010011000000100101010101101010101100000010110111110100'), '111011001010101100111011010010011000001010111010011000000100101010101101010101100000010111101100101');
            Test.assert.equal(add('11110010101101100011000000', '010001110001101111001000011111010000010010100001010101111011010011001001000001011'), '10001110001101111001000011111010000010010100001010110011001101000110101011001011');
            Test.assert.equal(add('0000111100100100100001110101000010100000011001110111000001', '010101010010101001100010000000110010101001011101000010010000101001000011'), '10101010010101010011110100101010100011110011111100010101010100000000100');
            Test.assert.equal(add('101100011000010', '110110000101011000011100110110111001101001010101'), '110110000101011000011100110110111111001100010111');
            Test.assert.equal(add('0', '110111000000001101010111101001111000011010000011100001011011110010000011101110011010011010'), '110111000000001101010111101001111000011010000011100001011011110010000011101110011010011010');
            Test.assert.equal(add('10010110110101011000110', '1110001011110110101000001001001001111000001111110111001100011001000011111101111010001010100101'), '1110001011110110101000001001001001111000001111110111001100011001000100010000110000110101101011');
            Test.assert.equal(add('0001100011110100010010100010101010011011001000100011100110110001001100001101110111001111000', '101011010011110010001010101010111001100101111100100000001010'), '1100011110100010010100010101111110101100110110100111100001000011000111101011011010000010');
            Test.assert.equal(add('001001010101111001000001101100100011011110101110', '011000100101001000110111101000110010101101111010'), '100001111011000001111001010101010110001100101000');
            Test.assert.equal(add('11110111000110111101100101001011111000101100100000010010010', '011000001001011'), '11110111000110111101100101001011111000101100111000011011101');
            Test.assert.equal(add('11100100110011111101010011111100100101010110', '11110100101001010111110110100010110010110100000101000000000101110111111010011011101110000'), '11110100101001010111110110100010110010110100100001100110100101100010011010000000011000110');
            Test.assert.equal(add('00110110100111011111010101100111100110111001111010010110100001110000001000011101000011110', '100000011101011011010110111011101000110111011000000'), '110110100111011111010101100111100111011010010111110001111000101011110001010100011011110');
        });
    });
});